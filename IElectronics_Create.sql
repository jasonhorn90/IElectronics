create table email(
item_detail_id number(10),
item_number number(10),
product_desc varchar2(100),
available_quantity number(10),
reorder_quantity number(10)
);

CREATE TABLE EMPLOYEE
( EMPLOYEE_ID NUMBER(10) not null
, EMPLOYEE_TYPE VARCHAR2(20) 
, EMPLOYEE_INFO VARCHAR2(250) 
, PAY_RATE NUMBER (10,2)
, Constraint EMPLOYEE PRIMARY KEY (EMPLOYEE_ID)
);

CREATE TABLE SALES_COMMISSION
( COMMISSION_ID NUMBER(10) NOT NULL
, COMMISSION_DATE DATE
, RATE NUMBER(3,2) 
, AMOUNT NUMBER(10,2) 
, EMPLOYEE_ID NUMBER(10) 
, Constraint SALES_COMMISSION PRIMARY KEY (COMMISSION_ID)
);

CREATE TABLE BULK_ITEM_DETAIL
( BULK_ITEM_DETAIL_ID NUMBER(10) NOT NULL
, BITEM_NUMBER NUMBER(10) NOT NULL
, LOCATION_ID NUMBER(10) NOT NULL
, QUANTITY_AVAILABLE NUMBER(10,2) 
, REORDER_QUANTITY NUMBER(10,2) 
, ITEM_LOCATION_ADDRESS VARCHAR2(250)
, Constraint BULK_ITEM_DETAIL PRIMARY KEY (BULK_ITEM_DETAIL_ID)
);

CREATE TABLE TIMECARD
(TIMECARD_ID NUMBER(10) NOT NULL
,EMPLOYEE_ID NUMBER(10) NOT NULL
,LOCATION_ID NUMBER(10) NOT NULL
,TIME_IN DATE
,TIME_OUT DATE
,TOTAL_HRS NUMBER(5,2)
,TOTAL_PAY NUMBER(10,2)
,CONSTRAINT TIMECARD PRIMARY KEY (TIMECARD_ID)
);

CREATE TABLE SALES_TRANSACTION
( SALES_TRANSACTION_ID NUMBER(10) NOT NULL
, TRANSACTION_DATE DATE 
, OTHER_INFO VARCHAR2(250) 
, EMPLOYEE_ID NUMBER(10) 
, Constraint SALES_TRANSACTION PRIMARY KEY (SALES_TRANSACTION_ID)
);

CREATE TABLE PAYMENTS
(CUSTOMER_ID NUMBER(10) NOT NULL
, SALES_TRANSACTION_ID NUMBER(10) NOT NULL
, PAYMENT_TYPE_ID NUMBER (10) 
, PAYMENT_AMOUNT NUMBER(10,2)
, CONSTRAINT PAYMENTS PRIMARY KEY (CUSTOMER_ID, SALES_TRANSACTION_ID)
);

CREATE TABLE PAYMENT_TYPE
(PAYMENT_TYPE_ID NUMBER(10) NOT NULL
, PAYMENT_DESCRIPTION VARCHAR2(100) 
, CONSTRAINT PAYMENT_TYPE PRIMARY KEY (PAYMENT_TYPE_ID)
);

CREATE TABLE SALES_TRANSACTION_DETAIL
(STD_ID NUMBER(10) NOT NULL
, ITEM_DETAIL_ID NUMBER(10) 
, BULK_ITEM_DETAIL_ID NUMBER(10)
, SALES_TRANSACTION_ID NUMBER(10)
, EMPLOYEE_ID NUMBER(10) 
, QUANTITY NUMBER(10) NOT NULL
, PRICE NUMBER(10, 2) NOT NULL
, CONSTRAINT SALES_TRANSACTION_DETAIL PRIMARY KEY (STD_ID)
);

CREATE TABLE ITEM_DETAIL
(ITEM_DETAIL_ID NUMBER(10) NOT NULL
, LOCATION_ID NUMBER(10) NOT NULL
, ITEM_NUMBER NUMBER(10) NOT NULL
, AVAILABLE_QUANTITY NUMBER(10)
, REORDER_QUANTITY NUMBER(10)
, ITEM_LOCATION_ADDRESS VARCHAR2(25)
, CONSTRAINT ITEM_DETAIL PRIMARY KEY (ITEM_DETAIL_ID)
);

CREATE TABLE CREDIT
(CREDIT_ID NUMBER(10) NOT NULL
, CUSTOMER_ID NUMBER(10) NOT NULL
, CARD_NAME VARCHAR2(50)
, CARD_NUMBER NUMBER(16)
, OTHER_INFO VARCHAR2(100)
, CONSTRAINT CREDIT PRIMARY KEY (CREDIT_ID)
);

CREATE TABLE CUSTOMER
(CUSTOMER_ID NUMBER(10) NOT NULL
, FNAME VARCHAR2 (50)
, LNAME VARCHAR2 (50)
, PHONE VARCHAR2(20)
, ALT_PHONE VARCHAR2 (20)
, OTHER_INFO VARCHAR2(250)
, CONSTRAINT CUSTOMER PRIMARY KEY (CUSTOMER_ID)
);

CREATE TABLE ADDRESS1
(ADDRESS_ID NUMBER(10) NOT NULL
, CUSTOMER_ID NUMBER(10)
, ADDRESS_TYPE VARCHAR2(25)
, STREET VARCHAR2(50)
, CITY VARCHAR2(50)
, STATE CHAR(2)
, ZIP VARCHAR2(10)
, CONSTRAINT ADDRESS1 PRIMARY KEY (ADDRESS_ID)
);

CREATE TABLE PURCHASE_ORDER_DETAIL
(POLINE_ID NUMBER(10) NOT NULL
, PURCHASEORDER_ID NUMBER(10) NOT NULL
, ITEM_DETAIL_ID NUMBER(10) NOT NULL
, EMPLOYEE_ID NUMBER(10)
, BULK_ITEM_DETAIL_ID NUMBER(10)
, QUANTITY NUMBER(10)
, PRICE NUMBER(10,2)
, CONSTRAINT PURCHASE_ORDER_DETAIL PRIMARY KEY (POLINE_ID)
);

CREATE TABLE PURCHASE_ORDER_HEADER
(PURCHASEORDER_ID NUMBER(10) NOT NULL
, VENDOR_ID NUMBER(10) NOT NULL
, PO_DATE DATE
, OTHER_INFO VARCHAR2(250)
, CONSTRAINT PURCHASE_ORDER_HEADER PRIMARY KEY (PURCHASEORDER_ID)
);

CREATE TABLE VENDOR
(VENDOR_ID NUMBER(10) NOT NULL
, VENDORNAME VARCHAR2(100) NOT NULL
, STREET VARCHAR2(50) NOT NULL
, CITY VARCHAR2(50) NOT NULL
, STATE CHAR(2) NOT NULL
, ZIP VARCHAR2(10) NOT NULL
, PHONE VARCHAR2(20) NOT NULL
, ALT_PHONE VARCHAR2(20)
, CONSTRAINT VENDOR PRIMARY KEY (VENDOR_ID)
);

CREATE TABLE STORE_LOCATION
(LOCATION_ID NUMBER(10) NOT NULL
, LOCATION_ADDRESS VARCHAR2(250)
, CONSTRAINT STORE_LOCATION PRIMARY KEY (LOCATION_ID)
);

CREATE TABLE ITEM_INVENTORY
(SERIAL_NUMBER VARCHAR2 (25) NOT NULL
, ITEM_DETAIL_ID NUMBER(10) NOT NULL
, ITEM_COND VARCHAR2(100)
,CONSTRAINT ITEM_INVENTORY PRIMARY KEY (SERIAL_NUMBER)
);

CREATE TABLE ITEM
(ITEM_NUMBER NUMBER(10) NOT NULL
, PRODUCT_CODE NUMBER(10) NOT NULL
, IS_DISCONTINUED CHAR(1)
,CONSTRAINT ITEM PRIMARY KEY (ITEM_NUMBER)
);

CREATE TABLE PRODUCT
(PRODUCT_CODE NUMBER(10) NOT NULL
, PRODUCT_DESC VARCHAR2(250)
, CONSTRAINT PRODUCT PRIMARY KEY (PRODUCT_CODE)
);

CREATE TABLE BULK_ITEM
(BITEM_NUMBER NUMBER(10) NOT NULL
, PRODUCT_CODE NUMBER(10) NOT NULL
, IS_DISCONTINUED CHAR(1)
, CONSTRAINT BULK_ITEM PRIMARY KEY (BITEM_NUMBER)
);

CREATE TABLE BULK_PRICE
(BULK_PRICE_ID NUMBER(10) NOT NULL
, BITEM_NUMBER NUMBER(10)
, SALES_PRICE NUMBER(10,2)
, START_DATE DATE
, END_DATE DATE
,CONSTRAINT BULK_PRICE PRIMARY KEY (BULK_PRICE_ID)
);

CREATE TABLE PRICE
(PRICE_ID NUMBER(10) NOT NULL
, ITEM_NUMBER NUMBER(10) NOT NULL
, SALES_PRICE NUMBER(10,2)
, START_DATE DATE
, END_DATE DATE
,CONSTRAINT PRICE PRIMARY KEY (PRICE_ID)
);

ALTER TABLE PRICE ADD
(CONSTRAINT PRICE_ITEM FOREIGN KEY (ITEM_NUMBER) REFERENCES ITEM(ITEM_NUMBER)
);

ALTER TABLE TIMECARD ADD
(CONSTRAINT TIME_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
,CONSTRAINT TIME_LOC FOREIGN KEY (LOCATION_ID) REFERENCES STORE_LOCATION(LOCATION_ID)
);

ALTER TABLE BULK_PRICE ADD
(CONSTRAINT BP_BI FOREIGN KEY (BITEM_NUMBER) REFERENCES BULK_ITEM (BITEM_NUMBER)
);

ALTER TABLE BULK_ITEM ADD
(CONSTRAINT BI_PROD FOREIGN KEY (PRODUCT_CODE) REFERENCES PRODUCT (PRODUCT_CODE)
);

ALTER TABLE ITEM ADD
(CONSTRAINT ITEM_PROD FOREIGN KEY (PRODUCT_CODE) REFERENCES PRODUCT (PRODUCT_CODE)
);

ALTER TABLE ITEM_INVENTORY ADD
(CONSTRAINT INV_ID FOREIGN KEY (ITEM_DETAIL_ID) REFERENCES ITEM_DETAIL (ITEM_DETAIL_ID)
);

ALTER TABLE PURCHASE_ORDER_HEADER ADD
(CONSTRAINT POH_VEND FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR(VENDOR_ID)
);

ALTER TABLE PURCHASE_ORDER_DETAIL ADD
(CONSTRAINT POL_PO FOREIGN KEY (PURCHASEORDER_ID) REFERENCES PURCHASE_ORDER_HEADER (PURCHASEORDER_ID)
, CONSTRAINT POL_ID FOREIGN KEY (ITEM_DETAIL_ID) REFERENCES ITEM_DETAIL (ITEM_DETAIL_ID)
);

ALTER TABLE CREDIT ADD
(CONSTRAINT CRED_CUST FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID)
);

ALTER TABLE ITEM_DETAIL ADD
(CONSTRAINT ID_LOC FOREIGN KEY (LOCATION_ID) REFERENCES STORE_LOCATION (LOCATION_ID)
, CONSTRAINT ID_ITEM FOREIGN KEY (ITEM_NUMBER) REFERENCES ITEM (ITEM_NUMBER)
);

ALTER TABLE SALES_TRANSACTION_DETAIL ADD
(CONSTRAINT STD_ITEMD FOREIGN KEY (ITEM_DETAIL_ID) REFERENCES ITEM_DETAIL (ITEM_DETAIL_ID)
,CONSTRAINT STD_BID FOREIGN KEY (BULK_ITEM_DETAIL_ID) REFERENCES BULK_ITEM_DETAIL (BULK_ITEM_DETAIL_ID)
,CONSTRAINT STD_ST FOREIGN KEY (SALES_TRANSACTION_ID) REFERENCES SALES_TRANSACTION (SALES_TRANSACTION_ID)
,CONSTRAINT STD_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

ALTER TABLE PAYMENTS ADD
(CONSTRAINT PAY_CUST FOREIGN KEY  (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID)
,CONSTRAINT PAY_SALESTRANS FOREIGN KEY (SALES_TRANSACTION_ID) REFERENCES SALES_TRANSACTION (SALES_TRANSACTION_ID)
, CONSTRAINT PAY_PAYTYPE FOREIGN KEY (PAYMENT_TYPE_ID) REFERENCES PAYMENT_TYPE (PAYMENT_TYPE_ID)
);

ALTER TABLE SALES_COMMISSION ADD
(CONSTRAINT SC_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

ALTER TABLE BULK_ITEM_DETAIL ADD
(CONSTRAINT BID_BITEM FOREIGN KEY (BITEM_NUMBER) REFERENCES BULK_ITEM (BITEM_NUMBER)
,CONSTRAINT BID_LOCATION FOREIGN KEY (LOCATION_ID) REFERENCES STORE_LOCATION (LOCATION_ID)
);

ALTER TABLE SALES_TRANSACTION ADD
(CONSTRAINT ST_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

CREATE SEQUENCE EMPLOYEE_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE SALES_COMMISSION_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE BULK_ITEM_DETAIL_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE SALES_TRANSACTION_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE SALES_TRANSACTION_DETAIL_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE PAYMENT_TYPE_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE ITEM_DETAIL_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE CREDIT_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE CUSTOMER_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE ADDRESS1_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE VENDOR_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE PURCHASE_ORDER_DETAIL_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE PURCHASE_ORDER_HEADER_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE BULK_PRICE_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE PRICE_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE ITEM_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE PRODUCT_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE BULK_ITEM_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE LOCATION_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE ITEM_INV_SEQ INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE TIMECARD_SEQ INCREMENT BY 1 START WITH 1;

CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE NEW_EMPLOYEEID NUMBER;
BEGIN
  SELECT EMPLOYEE_SEQ.NEXTVAL INTO NEW_EMPLOYEEID FROM DUAL;
  :NEW.EMPLOYEE_ID := NEW_EMPLOYEEID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_TIMECARD
BEFORE INSERT ON TIMECARD
FOR EACH ROW
DECLARE NEW_TIMECARDID NUMBER;
BEGIN
  SELECT TIMECARD_SEQ.NEXTVAL INTO NEW_TIMECARDID FROM DUAL;
  :NEW.TIMECARD_ID := NEW_TIMECARDID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_SALES_COMMISSION
BEFORE INSERT ON SALES_COMMISSION
FOR EACH ROW
DECLARE NEW_SALES_COMMISSIONID NUMBER;
BEGIN
  SELECT SALES_COMMISSION_SEQ.NEXTVAL INTO NEW_SALES_COMMISSIONID FROM DUAL;
  :NEW.COMMISSION_ID := NEW_SALES_COMMISSIONID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_BULK_ITEM_DETAIL
BEFORE INSERT ON BULK_ITEM_DETAIL
FOR EACH ROW
DECLARE NEW_BULK_ITEM_DETAILID NUMBER;
BEGIN
  SELECT BULK_ITEM_DETAIL_SEQ.NEXTVAL INTO NEW_BULK_ITEM_DETAILID FROM DUAL;
  :NEW.BULK_ITEM_DETAIL_ID := NEW_BULK_ITEM_DETAILID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_SALES_TRANSACTION
BEFORE INSERT ON SALES_TRANSACTION
FOR EACH ROW
DECLARE NEW_SALES_TRANSACTIONID NUMBER;
BEGIN
  SELECT SALES_TRANSACTION_SEQ.NEXTVAL INTO NEW_SALES_TRANSACTIONID FROM DUAL;
  :NEW.SALES_TRANSACTION_ID := NEW_SALES_TRANSACTIONID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_SALES_TRANS_DETAIL
BEFORE INSERT ON SALES_TRANSACTION_DETAIL
FOR EACH ROW
DECLARE NEW_SALES_TRANSID NUMBER;
BEGIN
  SELECT SALES_TRANSACTION_DETAIL_SEQ.NEXTVAL INTO NEW_SALES_TRANSID FROM DUAL;
  :NEW.STD_ID := NEW_SALES_TRANSID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_PAYMENT_TYPE
BEFORE INSERT ON PAYMENT_TYPE
FOR EACH ROW
DECLARE NEW_PAYMENT_TYPEID NUMBER;
BEGIN
  SELECT PAYMENT_TYPE_SEQ.NEXTVAL INTO NEW_PAYMENT_TYPEID FROM DUAL;
  :NEW.PAYMENT_TYPE_ID := NEW_PAYMENT_TYPEID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_ITEM_DETAIL
BEFORE INSERT ON ITEM_DETAIL
FOR EACH ROW
DECLARE NEW_ITEM_DETAILID NUMBER;
BEGIN
  SELECT ITEM_DETAIL_SEQ.NEXTVAL INTO NEW_ITEM_DETAILID FROM DUAL;
  :NEW.ITEM_DETAIL_ID := NEW_ITEM_DETAILID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_CREDIT
BEFORE INSERT ON CREDIT
FOR EACH ROW
DECLARE NEW_CREDITID NUMBER;
BEGIN
  SELECT CREDIT_SEQ.NEXTVAL INTO NEW_CREDITID FROM DUAL;
  :NEW.CREDIT_ID := NEW_CREDITID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_CUSTOMER
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
DECLARE NEW_CUSTOMERID NUMBER;
BEGIN
  SELECT CUSTOMER_SEQ.NEXTVAL INTO NEW_CUSTOMERID FROM DUAL;
  :NEW.CUSTOMER_ID := NEW_CUSTOMERID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_ADDRESS1
BEFORE INSERT ON ADDRESS1
FOR EACH ROW
DECLARE NEW_ADDRESS1ID NUMBER;
BEGIN
  SELECT ADDRESS1_SEQ.NEXTVAL INTO NEW_ADDRESS1ID FROM DUAL;
  :NEW.ADDRESS_ID := NEW_ADDRESS1ID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_VENDOR
BEFORE INSERT ON VENDOR
FOR EACH ROW
DECLARE NEW_VENDORID NUMBER;
BEGIN
  SELECT VENDOR_SEQ.NEXTVAL INTO NEW_VENDORID FROM DUAL;
  :NEW.VENDOR_ID := NEW_VENDORID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_PURCHASE_ORDER_DETAIL
BEFORE INSERT ON PURCHASE_ORDER_DETAIL
FOR EACH ROW
DECLARE NEW_PURCHASE_ORDER_DETAILID NUMBER;
BEGIN
  SELECT PURCHASE_ORDER_DETAIL_SEQ.NEXTVAL INTO NEW_PURCHASE_ORDER_DETAILID FROM DUAL;
  :NEW.POLINE_ID := NEW_PURCHASE_ORDER_DETAILID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_PURCHASE_ORDER_HEADER
BEFORE INSERT ON PURCHASE_ORDER_HEADER
FOR EACH ROW
DECLARE NEW_PURCHASE_ORDER_HEADERID NUMBER;
BEGIN
  SELECT PURCHASE_ORDER_HEADER_SEQ.NEXTVAL INTO NEW_PURCHASE_ORDER_HEADERID FROM DUAL;
  :NEW.PURCHASEORDER_ID := NEW_PURCHASE_ORDER_HEADERID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_BULK_PRICE
BEFORE INSERT ON BULK_PRICE
FOR EACH ROW
DECLARE NEW_BULK_PRICEID NUMBER;
BEGIN
  SELECT BULK_PRICE_SEQ.NEXTVAL INTO NEW_BULK_PRICEID FROM DUAL;
  :NEW.BULK_PRICE_ID := NEW_BULK_PRICEID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_PRICE
BEFORE INSERT ON PRICE
FOR EACH ROW
DECLARE NEW_PRICEID NUMBER;
BEGIN
  SELECT PRICE_SEQ.NEXTVAL INTO NEW_PRICEID FROM DUAL;
  :NEW.PRICE_ID := NEW_PRICEID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_ITEM
BEFORE INSERT ON ITEM
FOR EACH ROW
DECLARE NEW_ITEMID NUMBER;
BEGIN
  SELECT ITEM_SEQ.NEXTVAL INTO NEW_ITEMID FROM DUAL;
  :NEW.ITEM_NUMBER := NEW_ITEMID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_PRODUCT
BEFORE INSERT ON PRODUCT
FOR EACH ROW
DECLARE NEW_PRODUCTID NUMBER;
BEGIN
  SELECT PRODUCT_SEQ.NEXTVAL INTO NEW_PRODUCTID FROM DUAL;
  :NEW.PRODUCT_CODE := NEW_PRODUCTID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_BULK_ITEM
BEFORE INSERT ON BULK_ITEM
FOR EACH ROW
DECLARE NEW_BULK_ITEMID NUMBER;
BEGIN
  SELECT BULK_ITEM_SEQ.NEXTVAL INTO NEW_BULK_ITEMID FROM DUAL;
  :NEW.BITEM_NUMBER := NEW_BULK_ITEMID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_LOCATION
BEFORE INSERT ON STORE_LOCATION
FOR EACH ROW
DECLARE NEW_STORE_LOCATIONID NUMBER;
BEGIN
  SELECT LOCATION_SEQ.NEXTVAL INTO NEW_STORE_LOCATIONID FROM DUAL;
  :NEW.LOCATION_ID := NEW_STORE_LOCATIONID;
END;
/

CREATE OR REPLACE TRIGGER INSERT_ITEM_INVENTORY
BEFORE INSERT ON ITEM_INVENTORY
FOR EACH ROW
DECLARE NEW_ITEM_INVENTORYID VARCHAR2(25);
BEGIN
  SELECT 'A' || TO_CHAR(ITEM_INV_SEQ.NEXTVAL, 'FM00000000') INTO NEW_ITEM_INVENTORYID FROM DUAL;
  :NEW.SERIAL_NUMBER := NEW_ITEM_INVENTORYID;
END;
/

CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE
(EMPLOYEE_TYPE IN VARCHAR2 
,EMPLOYEE_INFO IN VARCHAR2
,PAYRATE IN NUMBER
) IS
BEGIN
INSERT INTO EMPLOYEE (EMPLOYEE_TYPE, EMPLOYEE_INFO, PAY_RATE)
VALUES
(EMPLOYEE_TYPE, EMPLOYEE_INFO, payrate);
END;
/

CREATE OR REPLACE PROCEDURE SET_EMPLOYEE
(EMPLOYEEID IN NUMBER
,EMPLOYEETYPE IN VARCHAR2 
,EMPLOYEEINFO IN VARCHAR2 
,PAYRATE IN NUMBER
) IS
BEGIN
UPDATE EMPLOYEE SET
EMPLOYEE_TYPE = EMPLOYEETYPE, EMPLOYEE_INFO = EMPLOYEEINFO, pay_rate = payrate
WHERE EMPLOYEE_id = EMPLOYEEID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_EMPLOYEE(EMPLOYEEID IN NUMBER)
IS
BEGIN
DELETE FROM EMPLOYEE WHERE EMPLOYEE_id = EMPLOYEEID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from SALES_TRANSACTION_DETAIL STD where STD.EMPLOYEE_id = EMPLOYEEID;
delete from SALES_COMMISSION SC where SC.EMPLOYEE_id = EMPLOYEEID;
delete from SALES_TRANSACTION ST where ST.EMPLOYEE_id = EMPLOYEEID;
delete from TIMECARD T where T.EMPLOYEE_ID = EMPLOYEEID;
elsif error_code = -2291 then
dbms_output.put_line('Invalid EMPLOYEE ID: ' || to_char(EMPLOYEEID));
else
dbms_output.put_line('Error deleting EMPLOYEE: ' || error_msg);
end if;
END;
end delete_EMPLOYEE;
/

CREATE OR REPLACE PROCEDURE ADD_SALES_COMMISSION
(COMMISSIONDATE IN DATE
, RATE IN NUMBER 
, AMOUNT IN NUMBER 
, EMPLOYEEID IN NUMBER
) IS
BEGIN
INSERT INTO SALES_COMMISSION (COMMISSION_DATE, RATE, AMOUNT, EMPLOYEE_ID)
VALUES
(COMMISSIONDATE, RATE, AMOUNT, EMPLOYEEID);
END ADD_SALES_COMMISSION;
/

CREATE OR REPLACE PROCEDURE SET_SALES_COMMISSION
(COMMISSIONID IN NUMBER
,COMMISSIONDATE IN DATE
, COMMRATE IN NUMBER 
, COMMAMOUNT IN NUMBER 
, EMPLOYEEID IN NUMBER
) IS
BEGIN
UPDATE SALES_COMMISSION SET
COMMISSION_DATE = COMMISSIONDATE, RATE = COMMRATE, AMOUNT = COMMAMOUNT, EMPLOYEE_ID = EMPLOYEEID
WHERE COMMISSION_ID = COMMISSIONID;
END SET_SALES_COMMISSION;
/

CREATE OR REPLACE PROCEDURE DELETE_SALES_COMMISSION(COMMISSIONID IN NUMBER)
IS
BEGIN
DELETE FROM SALES_COMMISSION WHERE COMMISSION_id = COMMISSIONID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid SALES_COMMISSION ID: ' || to_char(COMMISSIONID));
else
dbms_output.put_line('Error deleting SALES_COMMISSION: ' || error_msg);
end if;
END;
end delete_SALES_COMMISSION;
/

CREATE OR REPLACE PROCEDURE ADD_BULK_ITEM_DETAIL
(BITEMNUMBER IN NUMBER
, LOCATIONID IN NUMBER
, QUANTITYAVAILABLE IN NUMBER
, REORDERQUANTITY IN NUMBER
, ITEMLOCATIONADDRESS IN VARCHAR2
) IS
BEGIN
INSERT INTO BULK_ITEM_DETAIL (BITEM_NUMBER, LOCATION_ID, QUANTITY_AVAILABLE, REORDER_QUANTITY, ITEM_LOCATION_ADDRESS)
VALUES
(BITEMNUMBER, LOCATIONID,QUANTITYAVAILABLE,REORDERQUANTITY,ITEMLOCATIONADDRESS);
END;
/

CREATE OR REPLACE PROCEDURE SET_BULK_ITEM_DETAIL
(BULKITEMDETAILID IN NUMBER
,BITEMNUMBER IN NUMBER
, LOCATIONID IN NUMBER
, QUANTITYAVAILABLE IN NUMBER
, REORDERQUANTITY IN NUMBER
, ITEMLOCATIONADDRESS IN VARCHAR2
) IS
BEGIN
UPDATE BULK_ITEM_DETAIL SET
BITEM_NUMBER  = BITEMNUMBER, LOCATION_ID  = LOCATIONID, QUANTITY_AVAILABLE = QUANTITYAVAILABLE,
REORDER_QUANTITY = REORDERQUANTITY, ITEM_LOCATION_ADDRESS = ITEMLOCATIONADDRESS
WHERE BULK_ITEM_DETAIL_ID  = BULKITEMDETAILID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BULK_ITEM_DETAIL(BULKITEMDETAILID  IN NUMBER)
IS
BEGIN
DELETE FROM BULK_ITEM_DETAIL WHERE BULK_ITEM_DETAIL_ID  = BULKITEMDETAILID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
dbms_output.put_line('Error deleting Bulk Item (Detail): ' || error_msg);
else
dbms_output.put_line('Invalid BULK_ITEM_DETAIL_ID: ' || to_char(BULKITEMDETAILID));
end if;
END;
end delete_BULK_ITEM_DETAIL;
/

CREATE OR REPLACE PROCEDURE ADD_SALES_TRANSACTION
(TRANSACTIONDATE IN DATE 
, OTHERINFO IN VARCHAR2 
, EMPLOYEEID IN NUMBER
) IS
BEGIN
INSERT INTO SALES_TRANSACTION (TRANSACTION_DATE , OTHER_INFO , EMPLOYEE_ID)
VALUES
(TRANSACTIONDATE, OTHERINFO,EMPLOYEEID);
END;
/

CREATE OR REPLACE PROCEDURE SET_SALES_TRANSACTION
(SALESTRANSACTIONID IN NUMBER
,TRANSACTIONDATE IN DATE 
, OTHERINFO IN VARCHAR2 
, EMPLOYEEID IN NUMBER
) IS
BEGIN
UPDATE SALES_TRANSACTION SET
TRANSACTION_DATE = TRANSACTIONDATE, OTHER_INFO = OTHERINFO, EMPLOYEE_ID = EMPLOYEEID
WHERE SALES_TRANSACTION_ID = SALESTRANSACTIONID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_SALES_TRANSACTION(SALESTRANSACTIONID  IN NUMBER)
IS
BEGIN
DELETE FROM SALES_TRANSACTION WHERE SALES_TRANSACTION_ID  = SALESTRANSACTIONID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from PAYMENTS P where P.SALES_TRANSACTION_ID = SALESTRANSACTIONID;
delete from SALES_TRANSACTION_DETAIL STD where STD.SALES_TRANSACTION_ID = SALESTRANSACTIONID;
elsif error_code = -2291 then
dbms_output.put_line('Invalid SALES_TRANSACTION_ID: ' || to_char(SALESTRANSACTIONID));
else
dbms_output.put_line('Error deleting SALES TRANSACTION: ' || error_msg);
end if;
END;
end DELETE_SALES_TRANSACTION;
/

CREATE OR REPLACE PROCEDURE ADD_SALES_TRANSACTION_DETAIL
(ITEMDETAILID IN NUMBER 
, BULKITEMDETAILID IN NUMBER 
, SALESTRANSACTIONID IN NUMBER
,EMPLOYEEID IN NUMBER
,STDQUANTITY IN NUMBER
, STDPRICE IN NUMBER
) IS
BEGIN
INSERT INTO SALES_TRANSACTION_DETAIL (ITEM_DETAIL_ID, BULK_ITEM_DETAIL_ID, SALES_TRANSACTION_ID, EMPLOYEE_ID, QUANTITY, PRICE)
VALUES
(ITEMDETAILID, BULKITEMDETAILID, SALESTRANSACTIONID, EMPLOYEEID, STDQUANTITY, STDPRICE);
END;
/

CREATE OR REPLACE PROCEDURE SET_SALES_TRANSACTION_DETAIL
(STDID IN NUMBER
,ITEMDETAILID IN NUMBER 
, BULKITEMDETAILID IN NUMBER 
, SALESTRANSACTIONID IN NUMBER
,EMPLOYEEID IN NUMBER
,STDQUANTITY IN NUMBER
, STDPRICE IN NUMBER
) IS
BEGIN
UPDATE SALES_TRANSACTION_DETAIL SET
ITEM_DETAIL_ID = ITEMDETAILID, BULK_ITEM_DETAIL_ID  = BULKITEMDETAILID,
SALES_TRANSACTION_ID = SALESTRANSACTIONID, EMPLOYEE_ID = EMPLOYEEID, QUANTITY = STDQUANTITY,
PRICE = STDPRICE
WHERE STD_ID = STDID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_SALES_TRANS_DETAIL(STDID  IN NUMBER)
IS
BEGIN
DELETE FROM SALES_TRANSACTION_DETAIL WHERE STD_ID  = STDID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
dbms_output.put_line('Error deleting SALES TRANSACTION (DETAIL): ' || error_msg);
else
dbms_output.put_line('Invalid SALES_TRANSACTION_DETAIL_ID: ' || to_char(STDID));
end if;
END;
end DELETE_SALES_TRANS_DETAIL;
/

CREATE OR REPLACE PROCEDURE ADD_PAYMENT_TYPE
(PAYMENTDESCRIPTION IN VARCHAR
) IS
BEGIN
INSERT INTO PAYMENT_TYPE (PAYMENT_DESCRIPTION)
VALUES
(PAYMENTDESCRIPTION);
END;
/

CREATE OR REPLACE PROCEDURE SET_PAYMENT_TYPE
(PAYMENTTYPEID IN NUMBER
,PAYMENTDESCRIPTION IN VARCHAR
) IS
BEGIN
UPDATE PAYMENT_TYPE SET
PAYMENT_DESCRIPTION = PAYMENTDESCRIPTION
WHERE PAYMENT_TYPE_ID = PAYMENTTYPEID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_PAYMENT_TYPE(PAYMENTTYPEID  IN NUMBER)
IS
BEGIN
DELETE FROM PAYMENT_TYPE WHERE PAYMENT_TYPE_ID  = PAYMENTTYPEID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from PAYMENTS P where P.PAYMENT_TYPE_ID = PAYMENTTYPEID;
elsif error_code = -2291 then
dbms_output.put_line('Invalid PAYMENT_TYPE_ID: ' || to_char(PAYMENTTYPEID));
else
dbms_output.put_line('Error deleting PAYMENT TYPE: ' || error_msg);
end if;
END;
end DELETE_PAYMENT_TYPE;
/

CREATE OR REPLACE PROCEDURE ADD_ITEM_DETAIL
(LOCATIONID IN NUMBER
,ITEMNUMBER IN NUMBER
,AVAILABLEQUANTITY IN NUMBER
,REORDERQUANTITY IN NUMBER
,ITEMLOCATIONADDRESS IN VARCHAR
) IS
BEGIN
INSERT INTO ITEM_DETAIL (LOCATION_ID, ITEM_NUMBER, AVAILABLE_QUANTITY, REORDER_QUANTITY, ITEM_LOCATION_ADDRESS)
VALUES
(LOCATIONID, ITEMNUMBER, AVAILABLEQUANTITY, REORDERQUANTITY, ITEMLOCATIONADDRESS);
END;
/

CREATE OR REPLACE PROCEDURE SET_ITEM_DETAIL
(ITEMDETAILID IN NUMBER
,LOCATIONID IN NUMBER
,ITEMNUMBER IN NUMBER
,AVAILABLEQUANTITY IN NUMBER
,REORDERQUANTITY IN NUMBER
,ITEMLOCATIONADDRESS IN VARCHAR
) IS
BEGIN
UPDATE ITEM_DETAIL SET
LOCATION_ID = LOCATIONID, ITEM_NUMBER = ITEMNUMBER, AVAILABLE_QUANTITY = AVAILABLEQUANTITY,
REORDER_QUANTITY = REORDERQUANTITY, ITEM_LOCATION_ADDRESS = ITEMLOCATIONADDRESS
WHERE ITEM_DETAIL_ID = ITEMDETAILID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_ITEM_DETAIL(ITEMDETAILID  IN NUMBER)
IS
BEGIN
DELETE FROM ITEM_DETAIL WHERE ITEM_DETAIL_ID  = ITEMDETAILID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from ITEM_INVENTORY II where II.ITEM_DETAIL_ID = ITEMDETAILID;
DELETE FROM PURCHASE_ORDER_DETAIL POD WHERE POD.ITEM_DETAIL_ID = ITEMDETAILID;
DELETE FROM SALES_TRANSACTION_DETAIL STD WHERE STD.ITEM_DETAIL_ID = ITEMDETAILID;
elsif error_code = -2291 then
dbms_output.put_line('Invalid ITEM_DETAIL_ID: ' || to_char(ITEMDETAILID));
else
dbms_output.put_line('Error deleting ITEM DETAIL: ' || error_msg);
end if;
END;
end DELETE_ITEM_DETAIL;
/

CREATE OR REPLACE PROCEDURE ADD_CREDIT
(CUSTOMERID IN NUMBER
,CARDNAME IN VARCHAR2
,CARDNUMBER IN NUMBER
,OTHERINFO IN VARCHAR2
) IS
BEGIN
INSERT INTO CREDIT (customer_id, card_name, card_number, other_info)
VALUES
(customerid, cardname, cardnumber, otherinfo);
END;
/

CREATE OR REPLACE PROCEDURE SET_CREDIT
(CREDITID IN NUMBER
,CUSTOMERID IN NUMBER
,CARDNAME IN VARCHAR2
,CARDNUMBER IN NUMBER
,OTHERINFO IN VARCHAR2
) IS
BEGIN
UPDATE CREDIT SET
customer_id = customerid, card_name = cardname, card_number = cardnumber, other_info = otherinfo
WHERE credit_id = creditid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_CREDIT(creditid  IN NUMBER)
IS
BEGIN
DELETE FROM CREDIT WHERE credit_id = creditid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid CREDIT_ID: ' || to_char(creditid));
else
dbms_output.put_line('Error deleting CREDIT: ' || error_msg);
end if;
END;
end DELETE_CREDIT;
/

CREATE OR REPLACE PROCEDURE ADD_CUSTOMER
(CUSTFNAME IN VARCHAR2
,CUSTLNAME IN VARCHAR2
,CUSTPHONE IN VARCHAR2
,ALTPHONE IN VARCHAR2
,OTHERINFO IN VARCHAR2
) IS
BEGIN
INSERT INTO CUSTOMER (fname, lname, phone, alt_phone, other_info)
VALUES
(custfname, custlname, custphone, altphone, otherinfo);
END;
/

CREATE OR REPLACE PROCEDURE SET_CUSTOMER
(CUSTOMERID IN NUMBER
,CUSTFNAME IN VARCHAR2
,CUSTLNAME IN VARCHAR2
,CUSTPHONE IN VARCHAR2
,ALTPHONE IN VARCHAR2
,OTHERINFO IN VARCHAR2
) IS
BEGIN
UPDATE CUSTOMER SET
fname = custfname, lname = custlname, phone = custphone,
alt_phone = altphone, other_info = otherinfo
WHERE customer_id = customerid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_CUSTOMER(customerid  IN NUMBER)
IS
BEGIN
DELETE FROM CUSTOMER WHERE CUSTOMER_id = customerid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from CREDIT CR where CR.customer_id = customerid;
DELETE FROM PAYMENTS P WHERE P.customer_id = customerid;
DELETE FROM address1 AD WHERE AD.customer_id = customerid;
elsif error_code = -2291 then
dbms_output.put_line('Invalid CUSTOMER_ID: ' || to_char(customerid));
else
dbms_output.put_line('Error deleting CUSTOMER: ' || error_msg);
end if;
END;
end DELETE_CUSTOMER;
/

CREATE OR REPLACE PROCEDURE ADD_ADDRESS1
(CUSTOMERID IN NUMBER
,ADDRESSTYPE IN VARCHAR2
,STREETADDR IN VARCHAR2
,CITYADDR IN VARCHAR2
,STATEADDR IN VARCHAR2
,ZIPADDR IN VARCHAR2
) IS
BEGIN
INSERT INTO ADDRESS1 (customer_id, address_type, street, city, state, zip)
VALUES
(customerid, addresstype, streetaddr, cityaddr, stateaddr, zipaddr);
END;
/

CREATE OR REPLACE PROCEDURE SET_ADDRESS1
(ADDRESSID IN NUMBER
,CUSTOMERID IN NUMBER
,ADDRESSTYPE IN VARCHAR2
,STREETADDR IN VARCHAR2
,CITYADDR IN VARCHAR2
,STATEADDR IN VARCHAR2
,ZIPADDR IN VARCHAR2
) IS
BEGIN
UPDATE ADDRESS1 SET
customer_id = customerid, address_type = addresstype, street = streetaddr,
city = cityaddr, zip = zipaddr
WHERE address_id = addressid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_ADDRESS1(addressid  IN NUMBER)
IS
BEGIN
DELETE FROM ADDRESS1 WHERE address_id = addressid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid ADDRESS_ID: ' || to_char(addressid));
else
dbms_output.put_line('Error deleting ADDRESS: ' || error_msg);
end if;
END;
end DELETE_ADDRESS1;
/

CREATE OR REPLACE PROCEDURE ADD_VENDOR
(VENDOR_NAME IN VARCHAR2
,STREETADDR IN VARCHAR2
,CITYADDR IN VARCHAR2
,STATEADDR IN VARCHAR2
,ZIPADDR IN VARCHAR2
,VENDPHONE IN VARCHAR2
,VENDALTPHONE IN VARCHAR2
) IS
BEGIN
INSERT INTO VENDOR (vendorname, street, city, state, zip, phone, alt_phone)
VALUES
(vendor_name, streetaddr, cityaddr, stateaddr, zipaddr, vendphone, vendaltphone);
END;
/

CREATE OR REPLACE PROCEDURE SET_VENDOR
(VENDORID IN NUMBER
,VENDOR_NAME IN VARCHAR2
,STREETADDR IN VARCHAR2
,CITYADDR IN VARCHAR2
,STATEADDR IN VARCHAR2
,ZIPADDR IN VARCHAR2
,VENDPHONE IN VARCHAR2
,VENDALTPHONE IN VARCHAR2
) IS
BEGIN
UPDATE VENDOR SET
vendorname = vendor_name, street = streetaddr, city = cityaddr,
state = stateaddr, zip = zipaddr, PHONE = vendphone, alt_phone = vendaltphone
WHERE VENDOR_ID = vendorid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_VENDOR(vendorid  IN NUMBER)
IS
BEGIN
DELETE FROM VENDOR WHERE vendor_id = vendorid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from PURCHASE_ORDER_HEADER POH where POH.vendor_id = vendorid;
elsif error_code = -2291 then
dbms_output.put_line('Invalid VENDOR_ID: ' || to_char(vendorid));
else
dbms_output.put_line('Error deleting VENDOR: ' || error_msg);
end if;
END;
end DELETE_VENDOR;
/

CREATE OR REPLACE PROCEDURE ADD_PURCHASEORDERDETAIL
(PURCHASEORDERID IN VARCHAR2
,ITEMDETAILID IN NUMBER
,EMPLOYEEID IN NUMBER
,BULKITEMDETAILID IN NUMBER
,PODQUANTITY IN NUMBER
,PODPRICE IN NUMBER
) IS
BEGIN
INSERT INTO purchase_order_detail (purchaseorder_id, item_detail_id, employee_id, bulk_item_detail_id, quantity, price)
VALUES
(purchaseorderid, itemdetailid, employeeid, bulkitemdetailid, podquantity, podprice);
END;
/

CREATE OR REPLACE PROCEDURE SET_PURCHASEORDERDETAIL
(POLINEID IN NUMBER
,PURCHASEORDERID IN NUMBER
,ITEMDETAILID IN NUMBER
,EMPLOYEEID IN NUMBER
,BULKITEMDETAILID IN NUMBER
,PODQUANTITY IN NUMBER
,PODPRICE IN NUMBER
) IS
BEGIN
UPDATE purchase_order_detail SET
purchaseorder_id = purchaseorderid, item_detail_id = itemdetailid, employee_id = employeeid,
bulk_item_detail_id = bulkitemdetailid, quantity = podquantity, price = podprice
WHERE poline_id = polineid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_PURCHASEORDERDETAIL(polineid  IN NUMBER)
IS
BEGIN
DELETE FROM purchase_order_detail WHERE poline_id = polineid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid POLINE_ID: ' || to_char(polineid));
else
dbms_output.put_line('Error deleting PURCHASE ORDER (DETAIL): ' || error_msg);
end if;
END;
end DELETE_PURCHASEORDERDETAIL;
/

CREATE OR REPLACE PROCEDURE ADD_PURCHASEORDERhEADER
(VENDORID IN VARCHAR2
,PODATE IN DATE 
,OTHERINFO IN VARCHAR2
) IS
BEGIN
INSERT INTO purchase_order_HEADER (vendor_id, po_date, other_info)
VALUES
(vendorid, podate, otherinfo);
END;
/

CREATE OR REPLACE PROCEDURE SET_PURCHASEORDERhEADER
(PURCHASEORDERID IN NUMBER
,VENDORID IN VARCHAR2
,PODATE IN DATE 
,OTHERINFO IN VARCHAR2
) IS
BEGIN
UPDATE purchase_order_HEADER SET
vendor_id = vendorid, po_date = podate, other_info = otherinfo
WHERE purchaseorder_id = purchaseorderid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_PURCHASEORDERhEADER(purchaseorderid  IN NUMBER)
IS
BEGIN
DELETE FROM purchase_order_HEADER WHERE purchaseorder_id = purchaseorderid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
DELETE FROM purchase_order_detail POD WHERE POD.purchaseorder_id = purchaseorderid;
elsif error_code = -2291 then
dbms_output.put_line('Invalid PURCHASEORDER_ID: ' || to_char(purchaseorderid));
else
dbms_output.put_line('Error deleting PURCHASE ORDER: ' || error_msg);
end if;
END;
end DELETE_PURCHASEORDERhEADER;
/

CREATE OR REPLACE PROCEDURE ADD_BULKPRICE
(BITEMNUMBER IN NUMBER 
,SALESPRICE IN NUMBER 
,STARTDATE IN DATE 
,ENDDATE IN DATE
) IS
BEGIN
INSERT INTO bulk_price (bitem_number, sales_price, start_date, end_date)
VALUES
(bitemnumber, salesprice, startdate, enddate);
END;
/

CREATE OR REPLACE PROCEDURE SET_BULKPRICE
(BULKPRICEID IN NUMBER
,BITEMNUMBER IN NUMBER 
,SALESPRICE IN NUMBER 
,STARTDATE IN DATE 
,ENDDATE IN DATE
) IS
BEGIN
UPDATE bulk_price SET
bitem_number = bitemnumber, sales_price = salesprice, start_date = startdate,
end_date = enddate
WHERE bulk_price_id = bulkpriceid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BULKPRICE(bulkpriceid  IN NUMBER)
IS
BEGIN
DELETE FROM bulk_price WHERE bulk_price_id = bulkpriceid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid BULK_PRICE_ID: ' || to_char(bulkpriceid));
else
dbms_output.put_line('Error deleting BULK PRICE: ' || error_msg);
end if;
END;
end DELETE_BULKPRICE;
/

CREATE OR REPLACE PROCEDURE ADD_PRICE
(ITEMNUMBER IN NUMBER 
,SALESPRICE IN NUMBER 
,STARTDATE IN DATE 
,ENDDATE IN DATE
) IS
BEGIN
INSERT INTO price (item_number, sales_price, start_date, end_date)
VALUES
(itemnumber, salesprice, startdate, enddate);
END;
/

CREATE OR REPLACE PROCEDURE SET_PRICE
(PRICEID IN NUMBER
,ITEMNUMBER IN NUMBER 
,SALESPRICE IN NUMBER 
,STARTDATE IN DATE 
,ENDDATE IN DATE
) IS
BEGIN
UPDATE price SET
item_number = itemnumber, sales_price = salesprice, start_date = startdate,
end_date = enddate
WHERE price_id = priceid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_PRICE(priceid  IN NUMBER)
IS
BEGIN
DELETE FROM price WHERE price_id = priceid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid PRICE_ID: ' || to_char(priceid));
else
dbms_output.put_line('Error deleting PRICE: ' || error_msg);
end if;
END;
end DELETE_PRICE;
/

CREATE OR REPLACE PROCEDURE ADD_ITEM
(PRODUCTCODE IN NUMBER
, ISDISCONTINUED IN CHAR
) IS
BEGIN
INSERT INTO ITEM (product_code, is_discontinued)
VALUES
(productcode, ISDISCONTINUED);
END;
/

CREATE OR REPLACE PROCEDURE SET_ITEM
(ITEMNUMBER IN NUMBER
,PRODUCTCODE IN NUMBER
, ISDISCONTINUED IN CHAR
) IS
BEGIN
UPDATE ITEM SET
product_code = productcode, is_discontinued = isdiscontinued
WHERE item_number = itemnumber;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_ITEM(itemnumber IN NUMBER)
IS
BEGIN
DELETE FROM ITEM WHERE item_number = itemnumber;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from PRICE P where P.ITEM_NUMBER = itemnumber;
delete from item_detail IDD WHERE IDD.item_number = itemnumber;
elsif error_code = -2291 then
dbms_output.put_line('Invalid ITEM ID: ' || to_char(itemnumber));
else
dbms_output.put_line('Error deleting ITEM: ' || error_msg);
end if;
END;
end DELETE_ITEM;
/

CREATE OR REPLACE PROCEDURE ADD_PRODUCT
(PRODUCTDESC  IN VARCHAR2
) IS
BEGIN
INSERT INTO PRODUCT (product_desc)
VALUES
(productDESC);
END;
/

CREATE OR REPLACE PROCEDURE SET_PRODUCT
(PRODUCTCODE IN NUMBER
,PRODUCTDESC  IN VARCHAR2
) IS
BEGIN
UPDATE PRODUCT SET
product_desc = productdesc
WHERE product_code = productcode;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_PRODUCT(productcode IN NUMBER)
IS
BEGIN
DELETE FROM PRODUCT WHERE product_code = productcode;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from ITEM I where I.product_code = productcode;
delete from bulk_item BI WHERE BI.product_code = productcode;
elsif error_code = -2291 then
dbms_output.put_line('Invalid PRODUCT CODE: ' || to_char(productcode));
else
dbms_output.put_line('Error deleting PRODUCT: ' || error_msg);
end if;
END;
end DELETE_PRODUCT;
/

CREATE OR REPLACE PROCEDURE ADD_BULKITEM
(PRODUCTCODE  IN NUMBER
,ISDISCONTINUED IN CHAR
) IS
BEGIN
INSERT INTO BULK_ITEM (PRODUCT_CODE, is_discontinued)
VALUES
(PRODUCTCODE, isdiscontinued);
END;
/

CREATE OR REPLACE PROCEDURE SET_BULKITEM
(BITEMNUMBER IN NUMBER
,PRODUCTCODE IN NUMBER
,ISDISCONTINUED IN CHAR
) IS
BEGIN
UPDATE BULK_ITEM SET
product_code = productcode, is_discontinued = isdiscontinued
WHERE bitem_number = bitemnumber;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BULKITEM(bitemnumber IN NUMBER)
IS
BEGIN
DELETE FROM BULK_ITEM WHERE bitem_number = bitemnumber;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from bulk_price BP WHERE BP.bitem_number = bitemnumber;
DELETE FROM bulk_item_detail BID WHERE BID.bitem_number = bitemnumber;
elsif error_code = -2291 then
dbms_output.put_line('Invalid BULK ITEM ID: ' || to_char(bitemnumber));
else
dbms_output.put_line('Error deleting BULK ITEM: ' || error_msg);
end if;
END;
end DELETE_BULKITEM;
/

CREATE OR REPLACE PROCEDURE ADD_STORELOCATION
(LOCATIONADDRESS IN VARCHAR2
) IS
BEGIN
INSERT INTO store_location (location_address)
VALUES
(locationaddress);
END;
/

CREATE OR REPLACE PROCEDURE SET_STORELOCATION
(LOCATIONID IN NUMBER
,LOCATIONADDRESS IN VARCHAR2

) IS
BEGIN
UPDATE store_location SET
location_address = locationaddress
WHERE location_id = locationid;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_STORELOCATION(locationid IN NUMBER)
IS
BEGIN
DELETE FROM store_location WHERE location_id = locationid;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2292 then
delete from item_detail IDD WHERE IDD.location_id = locationid;
DELETE FROM bulk_item_detail BID WHERE BID.location_id = locationid;
DELETE FROM TIMECARD T WHERE T.LOCATION_ID = locationid;
elsif error_code = -2291 then
dbms_output.put_line('Invalid LOCATION ID: ' || to_char(locationid));
else
dbms_output.put_line('Error deleting LOCATION: ' || error_msg);
end if;
END;
end DELETE_STORELOCATION;
/

CREATE OR REPLACE PROCEDURE ADD_ITEMINVENTORY
(ITEMDETAILID IN NUMBER
,ITEMCONDITION IN VARCHAR2
) IS
BEGIN
INSERT INTO item_inventory (item_detail_id, item_cond)
VALUES
(itemdetailid, itemcondition);
END;
/

CREATE OR REPLACE PROCEDURE SET_ITEMINVENTORY
(SERIALNUMBER IN NUMBER
,ITEMDETAILID IN NUMBER
,ITEMCONDITION IN VARCHAR2
) IS
BEGIN
UPDATE item_inventory SET
item_detail_id = itemdetailid, item_cond = itemcondition
WHERE serial_number = serialnumber;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_ITEMINVENTORY(serialnumber IN NUMBER)
IS
BEGIN
DELETE FROM item_inventory WHERE serial_number = serialnumber;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid SERIAL NUMBER: ' || to_char(serialnumber));
else
dbms_output.put_line('Error deleting ITEM INVENTORY: ' || error_msg);
end if;
END;
end DELETE_ITEMINVENTORY;
/

CREATE OR REPLACE PROCEDURE ADD_TIMECARD
(EMPLOYEEID IN NUMBER
,LOCATIONID IN NUMBER
,TIMEIN IN DATE
,TIMEOUTT IN DATE
,TOTALHRS IN NUMBER
,TOTALPAY IN NUMBER
) IS
BEGIN
INSERT INTO TIMECARD (EMPLOYEE_ID, LOCATION_ID, TIME_IN, TIME_OUT, TOTAL_HRS, TOTAL_PAY)
VALUES
(EMPLOYEEID, LOCATIONID, TIMEIN, TIMEOUTT, TOTALHRS, TOTALPAY);
END;
/

CREATE OR REPLACE PROCEDURE SET_TIMECARD
(TIMECARDID IN NUMBER
,EMPLOYEEID IN NUMBER
,LOCATIONID IN NUMBER
,TIMEIN IN DATE
,TIMEOUTT IN DATE
,TOTALHRS IN NUMBER
,TOTALPAY IN NUMBER
) IS
BEGIN
UPDATE TIMECARD SET
EMPLOYEE_ID = EMPLOYEEID, LOCATION_ID = LOCATIONID, TIME_IN = TIMEIN, 
TIME_OUT = TIMEOUTT, TOTAL_HRS = TOTALHRS, TOTAL_PAY = TOTALPAY
WHERE TIMECARD_ID = TIMECARDID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_TIMECARD(TIMECARDID  IN NUMBER)
IS
BEGIN
DELETE FROM TIMECARD WHERE TIMECARD_ID = TIMECARDID;
exception when others then
declare error_code number := SQLCODE;
error_msg VARCHAR2(512) := SQLERRM;
begin
if error_code = -2291 then
dbms_output.put_line('Invalid TIMECARD_ID: ' || to_char(TIMECARDID));
else
dbms_output.put_line('Error deleting TIME CARD: ' || error_msg);
end if;
END;
end DELETE_TIMECARD;
/

create or replace procedure send_email(
itemdetailid in NUMBER, 
itemnumber in number, 
productdesc in varchar2, 
availablequantity in number,
reorderquantity in number
)IS
BEGIN
INSERT INTO EMAIL (item_detail_id,item_number,product_desc,available_quantity,reorder_quantity)
VALUES
(itemdetailid, itemnumber, productdesc,availablequantity, reorderquantity);
END;
/

--STOPPED HERE 04.08.17
COMMIT;


